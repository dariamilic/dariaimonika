#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include<string.h>

struct stablo;
typedef struct stablo* position;
typedef struct stablo {
	int el;
	position lijevo;
	position desno;
}stablo;

position DodajElement(int novi, position p);
void Preorder(position p);
void Inorder(position p);
void Postorder(position p);
position Brisi(int trazeniEl, position p);
position Trazi(int trazeniEl, position p);
position TraziMin(position p);
int VisinaStabla(position p);
void IspisLevela(position p,int brL);
void Levelorder(position p);

int main()
{
	position root=NULL;
	int odabir=0;
  int novi=0;
  int trazeniEl=0;
  position temp=NULL;

	do
	{
		printf("Izaberi:\n1-dodaj novi element u stablo\n2 - Preorder ispis\n3 - Inorder ispis\n4 - Postorder ispis\n5 - Level order ispis\n6 - trazi element\n7 - obrisi element\n8 - izlaz\n");
		scanf("%d", &odabir);
	
		switch (odabir)
		{
		case 1:
			printf("Upisi element kojeg zelis unijeti u stablo\n");
			scanf("%d", &novi);
			root = DodajElement(novi,root);
			break;
		case 2:
			Preorder(root);
			break;
		case 3:
			Inorder(root);
			break;
		case 4:
			Postorder(root);
			break;
		case 5:
			Levelorder(root);
			break;
		case 6:
			printf("Upisite element kojeg zelite pronaci:\n");
			scanf("%d", &trazeniEl);
			temp = Trazi(trazeniEl,root);
			if (temp!=NULL)
				printf("Pronasli ste %d u stablu!\n",temp->el);
			break;
		case 7:
			printf("Upisite element kojeg zelite pobrisati\n");
			scanf("%d", &trazeniEl);
			root = Brisi(trazeniEl,root);
			break;
		case 8:
      			return 0;
      			break;
			
    		default:
			printf("Greska...\n");
		}
	} while (odabir != '8');

	return EXIT_SUCCESS;
}

position DodajElement(int novo,position p)
{
	if (p == NULL) {
		p = (position)malloc(sizeof(stablo));
		p->el = novo;
		p->lijevo = NULL;
		p->desno = NULL;
		return p;
	}

	else if (novo > p->el) {
		p->desno = DodajElement(novo,p->desno);
	}

	else if (novo < p->el) {
		p->lijevo = DodajElement(novo,p->lijevo);
	}

	return p;
}

void Preorder(position p)
{
	if (p!=NULL)
	{
		printf("%d\n", p->el);
		Preorder(p->lijevo);
		Preorder(p->desno);
	}
}

void Inorder(position p)
{
	if (p!=NULL)
	{
		Inorder(p->lijevo);
		printf("%d\n", p->el);
		Inorder(p->desno);
	}
}

void Postorder(position p)
{
	if (p!=NULL)
	{
		Postorder(p->lijevo);
		Postorder(p->desno);
		printf("%d\n", p->el);
	}
}

void Levelorder(position p)
{
  if(p==NULL)
    return ;
  int i;
  int visina=VisinaStabla(p);
  for(i=0;i<visina;i++)
    {
      printf("Level %d: ",i);
      IspisLevela(p,i); 
      printf("\n");
    }
}

int VisinaStabla(position p)
{
  if(p==NULL)
    return 0;
  else{
    int lijevo_visina=VisinaStabla(p->lijevo); //trazi visinu lijevog i desnog podstabla
    int desno_visina=VisinaStabla(p->desno);
    
    if(lijevo_visina >= desno_visina)
      return lijevo_visina+1;
    else
      return desno_visina+1;
  }
}

void IspisLevela(position p,int brL) //brL-broj levela
{
  if(p==NULL)
    return;
  if(brL==0) 
  {
    printf("%d ",p->el);//ispis roota
  }
  else{
    IspisLevela(p->lijevo,brL-1); //smanjivamo razinu za 1 jer krecemo s vrha stabla
    IspisLevela(p->desno,brL-1);
  }
}

position Trazi(int trazeniEl,position p)
{
	if (p==NULL) {
		printf("Nema ga u stablu\n");
		return NULL;
	}
	else if (trazeniEl < p->el)
		p = Trazi(trazeniEl,p->lijevo);
	else if (trazeniEl > p->el)
		p = Trazi(trazeniEl,p->desno);

	return p;
}

position Brisi(int trazeniEl,position p)
{
	position temp;
  if (p==NULL)
		return p;
	else if (trazeniEl < p->el)
		p->lijevo = Brisi(trazeniEl,p->lijevo);
	else if (trazeniEl > p->el)
		p->desno = Brisi(trazeniEl,p->lijevo);
	else
	{
		if (p->lijevo!=NULL && p->desno!=NULL)
		{
			temp = TraziMin(p->desno);
			p->el = temp->el;
			p->desno = Brisi(temp->el,p->desno);
		}
		else
		{
			temp = p;
			if (p->lijevo==NULL)
				p = p->desno;
			else if (p->desno==NULL)
				p = p->lijevo;
			free(temp);
		}
	}
	return p;
}

position TraziMin(position p)
{
	if (p == NULL)
    {
        return NULL;
    }
    else if (p->lijevo == NULL)
    {
        return p;
    }
    else
        return TraziMin(p->lijevo);
}

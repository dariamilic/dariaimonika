#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 100
#define ERROR -1


struct Polinom;
typedef struct Polinom* pozicija;
typedef struct Polinom {
	int koef;
	int pot;
	pozicija next;
}Polinom;

int CitaDat(pozicija, pozicija, char*);
int CitaPolinom(pozicija, char*);
int Brisi(pozicija);
pozicija StvoriPolinom(int , int);
int SortUnos(pozicija, pozicija);
int Unos(pozicija, pozicija);
int Zbrajanje(pozicija, pozicija, pozicija);
int Mnozenje(pozicija, pozicija, pozicija);
int Ispis(pozicija);
int Oslobodi_mem(pozicija);

int main()
{
	pozicija head1 = NULL;
	pozicija head2 = NULL;
	pozicija head3 = NULL;
	pozicija head4 = NULL;

	head1 = (pozicija)malloc(sizeof(struct Polinom));
	head2 = (pozicija)malloc(sizeof(struct Polinom));
	head3 = (pozicija)malloc(sizeof(struct Polinom));
	head4 = (pozicija)malloc(sizeof(struct Polinom));


	head1->next = NULL;
	head2->next = NULL;
	head3->next = NULL;
	head4->next = NULL;

	int odabir = 1;

	char ime[100] = { 0 };
	printf("Ime datoteke\n");
	scanf(" %s", ime);

	while (odabir != 0)
	{
		printf("Sto zelite?\n");
		printf("Zbrojiti polinome - 1\n");
		printf("Pomnoziti polinome - 2\n");
		printf("Zavrsi -0\n\n");
		scanf(" %d", &odabir);

		switch (odabir)
		{
		case 0:
			break;

		case 1:

			if (CitaDat(head1, head2, ime) != EXIT_SUCCESS)
				break;

			printf("Polinomi su:\n");

			printf("\nPrvi:\n");
			Ispis(head1);

			printf("\nDrugi:\n");
			Ispis(head2);

			printf("\nZbroj polinoma:\n");
			Zbrajanje(head1, head2, head3);
			Ispis(head3);

			Oslobodi_mem(head1);
			Oslobodi_mem(head2);
			Oslobodi_mem(head3);


			break;
		case 2:
			if (CitaDat(head1, head2, ime) != EXIT_SUCCESS)
				break;

			printf("Polinomi su:\n");
			printf("\n1. redak:\n");
			Ispis(head1);

			printf("\n2. redak:\n");
			Ispis(head2);

			printf("\nUmnozak polinoma:\n");
			Mnozenje(head1, head2, head4);
			Ispis(head4);

			Oslobodi_mem(head1);
			Oslobodi_mem(head2);
			Oslobodi_mem(head4);
			break;
		default:
			printf("Greska!!!\n");
			break;
		}
	}
	return EXIT_SUCCESS;
}
int CitaDat(pozicija head1, pozicija head2, char* ime)
{
	FILE* fp = NULL;
	char buffer[MAX] = { 0 };

	fp = fopen(ime, "r");
	if (!fp)
	{
		printf("Datoteka se ne moze otvoriti!\n");
		return ERROR;
	}

	fgets(buffer, MAX, fp);
	CitaPolinom(head1, buffer);
	Brisi(head1);

	fgets(buffer, MAX, fp);
	CitaPolinom(head2, buffer);
	Brisi(head2);

	printf("\nUspjesno ste procitali polinome koji se nalazile u unesenoj datoteci!\n");

	fclose(fp);


	return EXIT_SUCCESS;
}
int CitaPolinom(pozicija head, char* buffer)
{
	int k;
	int p;
	int br = 0;
	int r = 0;

	while (strlen(buffer) > 0)
	{
		r = sscanf(buffer, " %d %d %n", &k, &p, &br);


		if (r == 2 && k != 0)
			SortUnos(head, StvoriPolinom(k, p));

		buffer += br;
	}

	return EXIT_SUCCESS;
}
int Brisi(pozicija head)
{
	pozicija temp1 = head;
	pozicija temp2 = NULL;

	while (temp1->next != NULL)
	{
		if (temp1->next->koef == 0)
		{
			temp2 = temp1->next;
			temp1->next = temp2->next;
			free(temp2);
		}
		else
			temp1 = temp1->next;
	}

	return EXIT_SUCCESS;
}

pozicija StvoriPolinom(int k, int p)
{
	pozicija noviClan = NULL;

	noviClan = (pozicija)malloc(sizeof(struct Polinom));

	noviClan->koef = k;
	noviClan->pot = p;
	noviClan->next = NULL;

	return noviClan;
}

int SortUnos(pozicija head, pozicija noviClan)
{
	pozicija temp1 = head;
	pozicija temp2 = noviClan;
	int n = 0;

	while (temp1->next != NULL && temp1->next->pot > temp2->pot)
		temp1 = temp1->next;

	if (temp1->next != NULL && temp1->next->pot == temp2->pot)
	{
		temp1->next->koef += temp2->koef;
		n = temp1->next->koef;

		if (n == 0)
			Brisi(temp1);
	}

	else
	{
		Unos(temp1, temp2);
	}


	return EXIT_SUCCESS;
}

int Unos(pozicija p, pozicija noviClan)
{
	noviClan->next = p->next;
	p->next = noviClan;

	return EXIT_SUCCESS;
}

int Zbrajanje(pozicija head1, pozicija head2, pozicija head3)
{
	pozicija P1 = head1->next;
	pozicija P2 = head2->next;
	pozicija P3 = head3;

	pozicija noviClan = NULL;

	pozicija temp = NULL;

	while (P1 != NULL && P2 != NULL)
	{
		if (P1->pot > P2->pot)
		{

			noviClan = StvoriPolinom(P1->koef, P1->pot);
			if (!noviClan)
			{
				return EXIT_FAILURE;
			}
			SortUnos(P3, noviClan);
			P1 = P1->next;
		}

		else if (P1->pot == P2->pot)
		{
			noviClan = StvoriPolinom(P1->koef + P2->koef, P1->pot);
			if (!noviClan)
			{
				return EXIT_FAILURE;
			}
			SortUnos(P3, noviClan);
			P1 = P1->next;
			P2 = P2->next;
		}

		else
		{
			noviClan = StvoriPolinom(P2->koef, P2->pot);
			if (!noviClan)
			{
				return EXIT_FAILURE;
			}
			SortUnos(P3, noviClan);
			P2 = P2->next;
		}

	}
	if (P1 != NULL)
		temp = P1;
	else
		temp = P2;

	while (temp != NULL)
	{
		noviClan = StvoriPolinom(temp->koef, temp->pot);
		if (!noviClan)
		{
			return EXIT_FAILURE;
		}
		SortUnos(P3, noviClan);
		temp = temp->next;
	}

	Brisi(P3);

	return EXIT_SUCCESS;
}

int Ispis(pozicija p)
{

	pozicija temp = p->next;

	while (temp)
	{
		printf("%dx*^%d\n", temp->koef, temp->pot);
		temp = temp->next;
	}

	return EXIT_SUCCESS;
}



int Mnozenje(pozicija head1, pozicija head2, pozicija head4)
{
	pozicija P1 = head1->next;
	pozicija P2 = head2->next;
	pozicija P4 = head4;

	pozicija Pocetak = P2;

	pozicija noviClan = NULL;

	while (P1 != NULL)
	{
		P2 = Pocetak;
		while (P2 != NULL)
		{
			noviClan = StvoriPolinom(P1->koef * P2->koef, P1->pot + P2->pot);
			if (!noviClan)
			{
				return EXIT_FAILURE;
			}

			SortUnos(P4, noviClan);
			P2 = P2->next;
		}
		P1 = P1->next;
	}

	Brisi(P4);
	return EXIT_SUCCESS;
}


int Oslobodi_mem(pozicija head)
{
	pozicija P = head;
	pozicija temp = NULL;

	if (P->next!=NULL)
	{
		while (P->next!=NULL)
		{
			temp = P->next;
			P->next = temp->next;
			free(temp);
		}
		return EXIT_SUCCESS;
	}
	else
		return EXIT_FAILURE;
}


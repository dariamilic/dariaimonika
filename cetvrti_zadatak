#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#define MAX 100
#define ERROR -1


struct polinom;
typedef struct polinom* pozicija;

typedef struct polinom
{
	int c;
	int e;
	pozicija next;
};

int CitaDat(pozicija pol1, pozicija pol2, char* ime);
int Ispis(pozicija pol);
int SortUnos(pozicija pol, pozicija Clan);
pozicija Novi(int coo, int exx);
int Brisi(pozicija pol);
int CitaDat(pozicija pol1, pozicija pol2, char* ime);

int main()
{
	pozicija head1 = NULL;
	pozicija head2 = NULL;
	pozicija head3 = NULL;
	pozicija head4 = NULL;
	head1 = (pozicija)malloc(sizeof(struct polinom));
	head2 = (pozicija)malloc(sizeof(struct polinom));
	head3 = (pozicija)malloc(sizeof(struct polinom));
	head4 = (pozicija)malloc(sizeof(struct polinom));
	char ime_dat[MAX] = { 0 };

	head1->next = NULL;
	head2->next = NULL;
	head3->next = NULL;
	head4->next = NULL;
	char ime[MAX] = { 0 };
	printf("Unesite ime datoteke:");
	scanf(" %s", ime);

	CitaDat(head1,head2,ime);
	
}

int CitaDat(pozicija pol1,pozicija pol2,char* ime)
{
	FILE* fp;
	char buffer[MAX] = { 0 };
	fp = fopen(ime,"r");

	if (fp = NULL)
	{
		printf("Datoteka nije otvorena");
		return ERROR;
	}
	else
	{
		printf("Uspjeh");
	}

	fgets(buffer,MAX,fp);
	CitaPolinom(pol1,buffer);
	Brisi(pol1);


	fgets(buffer,MAX,fp);
	CitaPolinom(pol2, buffer);
	Brisi(pol2);

	fclose(fp);

	return EXIT_SUCCESS;
}

int CitaPolinom(pozicija pol,char* buffer)
{
	int co;
	int ex;
	int n;
	int r;

	while (strlen(buffer) > 0)
	{
		r = sscanf(buffer,"%d %d %n",&co,&ex,&n);

		if (co != 0 && r == 2)
			SortUnos(pol,Novi(co,ex));

		buffer += n;

	}
	return EXIT_SUCCESS;
}

int Brisi(pozicija head)
{
	pozicija p = head;
	pozicija temp=NULL;
	
	while (p->next != NULL)
	{
		if (temp->c == 0)
		{
			temp = p->next;
			p->next = temp->next;
			free(temp);
		}
		else
			p = p->next;
	}
	return EXIT_SUCCESS;
}

pozicija Novi(int coo,int exx)
{
	pozicija Clan;
	Clan = (pozicija)malloc(sizeof(struct polinom));

	Clan->c = coo;
	Clan->e = exx;
	Clan->next = NULL;

	return Clan;

}

int SortUnos(pozicija head, pozicija Clan)
{
	pozicija p = head;
	pozicija temp= Clan;
	int n = 0;

	while (p->next != NULL && p->next->e > temp->e)
		p= p->next;

	if (p->next != NULL && p->next->e == temp->e)
	{
		p->next->c += temp->c;
		n = p->c;

		if (n == 0)
			Brisi(p);
	}

	else
	{
		Novi(temp->c,temp->e);
		UnosPoslije(p,temp);
		
	}
		return EXIT_SUCCESS;
}

int Ispis(pozicija pol)
{
	pozicija temp = pol->next;

	while (temp)
	{
		printf("%dx*^%d\n", temp->c, temp->e);
		temp = temp->next;
	}

	return EXIT_SUCCESS;
}
int UnosPoslije(pozicija p, pozicija Clan)
{
	Clan->next = p->next;
	p->next = Clan;
}

